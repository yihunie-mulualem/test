// @ts-nocheck
import React from "react";
import { createContext, useContext, useEffect, useState } from "react";
import { Formik as BaseFormik, useFormikContext, FormikProps, FormikConfig } from "formik";

const FormikContext = createContext();

export function FormikProvider({ children }) {
  const [states, setStates] = useState({});

  return (
    <FormikContext.Provider value={{states, setStates}}>
      {children}
    </FormikContext.Provider>
  )
}

type UseFormikProps = { formikKey?: string };

export function useFormik(props: UseFormikProps): FormikProps<any> {

  if(!props) return useFormikContext();

  const { formikKey } = props;
  
  const context =  useContext(FormikContext);

  if(typeof context === "undefined") return undefined;

  const { states, setStates } = context;

  const state =  states[formikKey] || {};

  return {
    ...state,
    setState: (state)=> {
      setStates((prevStates)=> ({
        ...prevStates, [formikKey]: {...prevStates[formikKey], ...state}
      }))
    }
  }
}

type FormikConfigProps = { formikKey: string } & FormikConfig<any>;

export function Formik({ formikKey, children, ...props }: FormikConfigProps) {
  const { setState } = useFormik({ formikKey });

  return (
    <BaseFormik key={formikKey} {...props}>
      {(state)=> {

        useEffect(()=> { 
          setState(state); 
        }, [
          state.dirty,
          state.errors,
          state.isSubmitting,
          state.isValid,
          state.isValidating,
          state.status,
          state.touched,
          state.values,
          state.enableReinitialize,
          state.isInitialValid,
          state.initialErrors,
          state.initialStatus,
          state.initialTouched,
          state.initialValues,
        ]);

        if(typeof children === "function") {
          return children(state);
        }

        return children;
      }}
    </BaseFormik>
  )
}
