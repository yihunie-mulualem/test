'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var formik = require('formik');

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

var _excluded = ["formikKey", "children"];
var FormikContext = /*#__PURE__*/React.createContext();
function FormikProvider(_ref) {
  var children = _ref.children;
  var _useState = React.useState({}),
    states = _useState[0],
    setStates = _useState[1];
  return React__default.createElement(FormikContext.Provider, {
    value: {
      states: states,
      setStates: setStates
    }
  }, children);
}
function useFormik(props) {
  if (!props) return formik.useFormikContext();
  var formikKey = props.formikKey;
  var context = React.useContext(FormikContext);
  if (typeof context === "undefined") return undefined;
  var states = context.states,
    setStates = context.setStates;
  var state = states[formikKey] || {};
  return _extends({}, state, {
    setState: function setState(state) {
      setStates(function (prevStates) {
        var _extends2;
        return _extends({}, prevStates, (_extends2 = {}, _extends2[formikKey] = _extends({}, prevStates[formikKey], state), _extends2));
      });
    }
  });
}
function Formik(_ref2) {
  var formikKey = _ref2.formikKey,
    children = _ref2.children,
    props = _objectWithoutPropertiesLoose(_ref2, _excluded);
  var _useFormik = useFormik({
      formikKey: formikKey
    }),
    setState = _useFormik.setState;
  return React__default.createElement(formik.Formik, Object.assign({
    key: formikKey
  }, props), function (state) {
    React.useEffect(function () {
      setState(state);
    }, [state.dirty, state.errors, state.isSubmitting, state.isValid, state.isValidating, state.status, state.touched, state.values, state.enableReinitialize, state.isInitialValid, state.initialErrors, state.initialStatus, state.initialTouched, state.initialValues]);
    if (typeof children === "function") {
      return children(state);
    }
    return children;
  });
}

exports.Formik = Formik;
exports.FormikProvider = FormikProvider;
exports.useFormik = useFormik;
//# sourceMappingURL=react-formik.cjs.development.js.map
