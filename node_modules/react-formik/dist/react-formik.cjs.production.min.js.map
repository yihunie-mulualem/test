{"version":3,"file":"react-formik.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["// @ts-nocheck\nimport React from \"react\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { Formik as BaseFormik, useFormikContext, FormikProps, FormikConfig } from \"formik\";\n\nconst FormikContext = createContext();\n\nexport function FormikProvider({ children }) {\n  const [states, setStates] = useState({});\n\n  return (\n    <FormikContext.Provider value={{states, setStates}}>\n      {children}\n    </FormikContext.Provider>\n  )\n}\n\ntype UseFormikProps = { formikKey?: string };\n\nexport function useFormik(props: UseFormikProps): FormikProps<any> {\n\n  if(!props) return useFormikContext();\n\n  const { formikKey } = props;\n  \n  const context =  useContext(FormikContext);\n\n  if(typeof context === \"undefined\") return undefined;\n\n  const { states, setStates } = context;\n\n  const state =  states[formikKey] || {};\n\n  return {\n    ...state,\n    setState: (state)=> {\n      setStates((prevStates)=> ({\n        ...prevStates, [formikKey]: {...prevStates[formikKey], ...state}\n      }))\n    }\n  }\n}\n\ntype FormikConfigProps = { formikKey: string } & FormikConfig<any>;\n\nexport function Formik({ formikKey, children, ...props }: FormikConfigProps) {\n  const { setState } = useFormik({ formikKey });\n\n  return (\n    <BaseFormik key={formikKey} {...props}>\n      {(state)=> {\n\n        useEffect(()=> { \n          setState(state); \n        }, [\n          state.dirty,\n          state.errors,\n          state.isSubmitting,\n          state.isValid,\n          state.isValidating,\n          state.status,\n          state.touched,\n          state.values,\n          state.enableReinitialize,\n          state.isInitialValid,\n          state.initialErrors,\n          state.initialStatus,\n          state.initialTouched,\n          state.initialValues,\n        ]);\n\n        if(typeof children === \"function\") {\n          return children(state);\n        }\n\n        return children;\n      }}\n    </BaseFormik>\n  )\n}\n"],"names":["FormikContext","createContext","useFormik","props","useFormikContext","formikKey","context","useContext","setStates","states","setState","state","prevStates","children","React","BaseFormik","key","useEffect","dirty","errors","isSubmitting","isValid","isValidating","status","touched","values","enableReinitialize","isInitialValid","initialErrors","initialStatus","initialTouched","initialValues","useState","Provider","value"],"mappings":"0aAKMA,EAAgBC,2BAcNC,EAAUC,GAExB,IAAIA,EAAO,OAAOC,qBAElB,IAAQC,EAAcF,EAAdE,UAEFC,EAAWC,aAAWP,GAE5B,QAAsB,IAAZM,EAAV,CAEA,IAAgBE,EAAcF,EAAdE,UAIhB,YAJ8BF,EAAtBG,OAEcJ,IAAc,IAIlCK,SAAU,SAACC,GACTH,GAAU,SAACI,GAAU,MAAA,YAChBA,UAAaP,QAAgBO,EAAWP,GAAeM,6CAQzCN,IAAAA,UAAWQ,IAAAA,SAAaV,0IACvCO,EAAaR,EAAU,CAAEG,UAAAA,IAAzBK,SAER,OACEI,gBAACC,wBAAWC,IAAKX,GAAeF,IAC7B,SAACQ,GAqBA,OAnBAM,aAAU,WACRP,EAASC,KACR,CACDA,EAAMO,MACNP,EAAMQ,OACNR,EAAMS,aACNT,EAAMU,QACNV,EAAMW,aACNX,EAAMY,OACNZ,EAAMa,QACNb,EAAMc,OACNd,EAAMe,mBACNf,EAAMgB,eACNhB,EAAMiB,cACNjB,EAAMkB,cACNlB,EAAMmB,eACNnB,EAAMoB,gBAGe,mBAAblB,EACDA,EAASF,GAGXE,6CApEkBA,IAAAA,WACHmB,WAAS,IAErC,OACElB,gBAACd,EAAciC,UAASC,MAAO,CAACzB,YAAQD,iBACrCK"}